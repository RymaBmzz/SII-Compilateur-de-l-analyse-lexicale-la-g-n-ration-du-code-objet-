grammar Tiny;
program :'compil' IDF'('')' '{' dv 'start' dp '}'   ;
dv : type p ';'  | type p ';' dv ;
p : IDF ','p | IDF    	;
type : 'intcompil'|'floatcompil' 	;
dp :  aff dp | read dp | write dp| cond dp | aff | read | write | cond   	 ;
read : 'scancompil' '(' IDF ',' IDF  ')' ';' x ;
x: dp |;
write : 'printcompil' '(' t ')' ';' dp | 'printcompil' '('  t  ')' ';'   	;
t : CHAINE | IDF		 ;
cond : 'if' '(' oprtf ')' 'then' inif sinon  	;
inif : dp | oprt 		;
sinon : els inif 'endif' ';' | 'endif' ';'  		;
els : 'else' ;
oprtf : oprt op oprt 	;
op:'>'|'<'| '>=' |'<='|'!='|'=' ;
aff : IDF '=' oprt ';' ;
oprt : oprt '+' oprt1 | oprt1  		;
oprt1 : oprt1 '-' oprt2 |oprt2 ;
oprt2 : oprt2 '*' oprt3 | oprt3  		;
oprt3 : oprt3 '/' oprt4 | oprt4 		;
oprt4 : '(' oprt ')' | IDF | NBINT | NBFLOAT 	 ;
comment : '/' '*' CHAINE '*' '/' | '/' '/' CHAINE ;
NBINT : '0'|[+-]?[1-9][0-9]* ;
NBFLOAT : '0'|[+-]?[1-9][0-9]*('.'[0-9]*) ;
IDF : [a-zA-Z] [a-zA-Z0-9]* ;
WHITESPACE : [ \r\n\t] -> skip;
CHAINE :  '"' (~["])* '"'  ;

